import { h, Host, } from '@stencil/core';
import { ApiVersion, fetchTransport, } from '@what3words/api';
import { AUTOSUGGEST_SELECTOR, CURRENT_LOCATION_CONTROL_SELECTOR, DEFAULTS, DEFAULT_LIBS, MAP_SELECTOR, MAP_TYPE_CONTROL_SELECTOR, MARKER_SRC, MIN_GRID_ZOOM_LEVEL, SEARCH_CONTROL_SELECTOR, SELECTED_ZOOM_LEVEL, SELECTORS, TOP_LEFT, ZOOM_CONTROL_SELECTOR, W3W_REGEX, what3wordsClients, sdk, } from '../../lib';
import { GoogleMaps } from './providers/google';
import { version } from '../../../package.json';
export class What3wordsMap {
  constructor() {
    var _a;
    this.api_key = DEFAULTS.emptyString;
    this.headers = DEFAULTS.headers;
    this.base_url = ((_a = sdk.api.clients.gridSection['_config']) === null || _a === void 0 ? void 0 : _a.host) || DEFAULTS.base_url;
    this.api_version = ApiVersion.Version3;
    this.words = DEFAULTS.emptyString;
    this.map_provider = 'google';
    this.map_api_key = DEFAULTS.emptyString;
    this.version = 'weekly';
    this.libraries = DEFAULT_LIBS;
    this.language = 'en';
    this.region = 'GB';
    this.lat = DEFAULTS.center.lat;
    this.lng = DEFAULTS.center.lng;
    this.tilt = 0;
    this.disable_default_ui = undefined;
    this.zoom = 8;
    this.zoom_control = undefined;
    this.zoom_control_position = 0;
    this.map_type_id = undefined;
    this.map_type_control = undefined;
    this.map_type_control_position = 0;
    this.scale_control = undefined;
    this.street_view_control = undefined;
    this.street_view_control_position = 0;
    this.rotate_control = undefined;
    this.rotate_control_position = 0;
    this.fullscreen_control = undefined;
    this.fullscreen_control_position = 0;
    this.search_control_position = TOP_LEFT;
    this.current_location_control_position = 0;
    this.selected_zoom = SELECTED_ZOOM_LEVEL;
    this.current_location = undefined;
    this.watch_location = undefined;
    this.marker_icon = MARKER_SRC;
    this.reset_zoom_on_select = undefined;
    this.searchControlSlot = undefined;
    this.currentLocationControlSlot = undefined;
    this.zoomControlSlot = undefined;
    this.mapTypeControlSlot = undefined;
    this.mapLoaded = false;
    this.input = DEFAULTS.null;
    this.autosuggest = DEFAULTS.null;
    this.placesSuggestions = [];
    this.request = DEFAULTS.null;
    this.watch_id = DEFAULTS.null;
    this.provider = undefined;
    this.current_location_coordinates = undefined;
    this.w3wLanguage = this.language;
    this.clients = {};
  }
  async setApiKey(key) {
    Object.values(this.clients).forEach(client => client.apiKey(key));
  }
  async setBaseUrl(host) {
    Object.values(this.clients).forEach(client => client.config({ host }));
  }
  async setHeaders(value) {
    const componentHeaders = this.getComponentHeaders();
    const injectedHeaders = typeof value === 'string' ? JSON.parse(value) : value;
    Object.values(this.clients).forEach(client => client.config({ headers: Object.assign(Object.assign({}, injectedHeaders), componentHeaders) }));
  }
  async setApiVersion(api_version) {
    Object.values(this.clients).forEach(client => client.config({ apiVersion: api_version }));
  }
  async setWords(words) {
    if (!W3W_REGEX.test(words) || !this.provider)
      return;
    return this.clients.convertToCoordinates
      .run({ words })
      .then((response) => {
      const { square, coordinates } = response;
      this.provider.plotSquare(square);
      this.provider.plotMarker(response, coordinates => this.coordinates_changed.emit(coordinates), this.marker_icon);
      this.provider.panTo(coordinates);
      const zoom = this.provider.zoom;
      if (zoom < this.selected_zoom)
        this.provider.zoom = this.selected_zoom;
      this.setInputValue(words);
    })
      .catch(error => {
      this.__error.emit(error);
      const { details } = error;
      console.error((details === null || details === void 0 ? void 0 : details.message) || error.message);
    });
  }
  async clearGrid() {
    if (!this.provider)
      return;
    this.provider.clearGrid();
  }
  async getLat() {
    if (!this.provider)
      return 0;
    return this.provider.center.lat;
  }
  async setCoordinates(newCoordinateValue, _oldCoordinateValue, propName) {
    if (!this.provider)
      return;
    const newCoordinates = {
      lat: this.lat,
      lng: this.lng,
      [propName]: newCoordinateValue,
    };
    const validatedCoordinates = this.validateCoordinates(newCoordinates);
    this.lng = validatedCoordinates.lng;
    this.lat = validatedCoordinates.lat;
    this.provider.center = validatedCoordinates;
  }
  async getLng() {
    if (!this.provider)
      return 0;
    return this.provider.center.lng;
  }
  async setZoom(zoom) {
    if (!this.provider)
      return;
    this.provider.zoom = zoom;
  }
  async getZoom() {
    if (!this.provider)
      return 0;
    return this.provider.zoom;
  }
  async getBounds() {
    if (!this.provider)
      return DEFAULTS.bounds;
    return this.provider.mapBounds;
  }
  async panTo(coordinates) {
    if (!this.provider)
      return;
    this.provider.panTo(coordinates);
  }
  async setMapTypeId(map_type_id) {
    if (!this.provider)
      return;
    this.provider.mapTypeId = map_type_id;
  }
  setMapControlPosition(control, position) {
    if (!this.provider)
      return;
    this.provider.setMapControlPosition(control, position);
  }
  setSearchControlPosition(position) {
    this.searchControlSlot = this.host.querySelector(SEARCH_CONTROL_SELECTOR);
    if (this.searchControlSlot) {
      this.setMapControlPosition(this.searchControlSlot, position);
    }
  }
  setCurrentLocationControlPosition(position) {
    this.currentLocationControlSlot = this.host.querySelector(CURRENT_LOCATION_CONTROL_SELECTOR);
    if (this.currentLocationControlSlot) {
      this.setMapControlPosition(this.currentLocationControlSlot, position);
    }
  }
  setMapTypeControlPosition(position) {
    if (!this.provider)
      return;
    this.provider.mapTypeControlPosition = position;
    this.mapTypeControlSlot = this.host.querySelector(MAP_TYPE_CONTROL_SELECTOR);
    if (this.mapTypeControlSlot) {
      this.setMapControlPosition(this.mapTypeControlSlot, position);
    }
  }
  setZoomControlPosition(position) {
    if (!this.provider)
      return;
    this.provider.zoomControlPosition = position;
    this.zoomControlSlot = this.host.querySelector(ZOOM_CONTROL_SELECTOR);
    if (this.zoomControlSlot) {
      this.setMapControlPosition(this.zoomControlSlot, position);
    }
  }
  setFullscreenControlPosition(position) {
    if (!this.provider)
      return;
    this.provider.fullscreenControlPosition = position;
  }
  setStreetViewControlPosition(position) {
    if (!this.provider)
      return;
    this.provider.streetViewControlPosition = position;
  }
  setRotateControlPosition(position) {
    if (!this.provider)
      return;
    this.provider.rotateControlPosition = position;
  }
  handlePlacesSuggestions(suggestions) {
    this.autosuggest.options = suggestions;
  }
  validateCoordinates(coordinates) {
    // NOTE: the Google Maps SDK will clamp lat/lng values
    // See https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLng
    if (isNaN(coordinates.lat) ||
      isNaN(coordinates.lng) ||
      coordinates.lng === 0 ||
      coordinates.lat === 0) {
      return Object.assign(Object.assign({}, coordinates), { lat: DEFAULTS.center.lat, lng: DEFAULTS.center.lng });
    }
    return coordinates;
  }
  async onLoad() {
    const { words } = this;
    const isBrowser = typeof window !== 'undefined';
    const searchControl = this.host.querySelector(SEARCH_CONTROL_SELECTOR);
    if (isBrowser && this.watch_location) {
      this.watchPosition();
    }
    else if (isBrowser && this.current_location) {
      this.getCurrentPosition();
    }
    if (words) {
      await this.setWords(words);
    }
    if (searchControl && this.provider) {
      this.provider.addControl(searchControl, this.search_control_position);
    }
  }
  async onSelectedCoordinates({ detail: { lat, lng } }) {
    if (!this.provider)
      return;
    return this.clients.convertTo3wa
      .run({
      coordinates: { lat, lng },
      language: this.w3wLanguage,
    })
      .then((response) => {
      var _a, _b;
      const { square, words } = response;
      this.setInputValue(words);
      // revert w3w language to map language (default) to maintain user language setting
      // e.g. sets to response.language during input change (`onSelectedSuggestion`)
      if (![(_a = this.autosuggest) === null || _a === void 0 ? void 0 : _a.language, this.language].includes(this.w3wLanguage)) {
        this.w3wLanguage = ((_b = this.autosuggest) === null || _b === void 0 ? void 0 : _b.language) || this.language;
      }
      this.provider.plotSquare(square);
      this.provider.plotMarker(response, coordinates => this.coordinates_changed.emit(coordinates), this.marker_icon);
      this.selected_square.emit(response);
    })
      .catch(error => {
      const { details } = error;
      console.error((details === null || details === void 0 ? void 0 : details.message) || error.message);
    });
  }
  initProvider(opts = {}) {
    if (!this.provider)
      return;
    const _opts = Object.assign({ version: this.version, api_key: this.map_api_key, libraries: this.libraries, language: this.language, region: this.region, center: { lat: this.lat, lng: this.lng }, tilt: this.tilt, disable_default_ui: this.disable_default_ui, zoom: this.zoom, zoom_control: this.zoom_control, zoom_control_position: this.zoom_control_position, map_type_id: this.map_type_id, map_type_control: this.map_type_control, map_type_control_position: this.map_type_control_position, scale_control: this.scale_control, street_view_control: this.street_view_control, street_view_control_position: this.street_view_control_position, rotate_control: this.rotate_control, rotate_control_position: this.rotate_control_position, fullscreen_control: this.fullscreen_control, fullscreen_control_position: this.fullscreen_control_position }, opts);
    const mapDiv = this.host.querySelector(MAP_SELECTOR);
    this.provider.init(mapDiv, _opts);
  }
  watchMapVersion(version) {
    this.initProvider({ version });
  }
  watchMapApiKey(api_key) {
    this.initProvider({ api_key });
  }
  watchMapLibraries(libraries) {
    this.initProvider({ libraries });
  }
  watchMapLanguage(language) {
    this.initProvider({ language });
  }
  watchMapRegion(region) {
    this.initProvider({ region });
  }
  setMapLoaded(loaded) {
    this.mapLoaded = loaded;
  }
  onCurrentPositionSuccess(position) {
    const { coords: { latitude: lat, longitude: lng }, } = position;
    if (!this.provider)
      return;
    const center = this.provider.center;
    const hasLocationChanged = center.lat !== lat || center.lng !== lng;
    if (hasLocationChanged) {
      this.provider.panTo({ lat, lng });
      this.provider.zoom = this.selected_zoom;
      this.coordinates_changed.emit({ lat, lng });
      this.current_location_coordinates = { lat, lng };
    }
  }
  onCurrentPositionFailure(error) {
    this.__error.emit(new ErrorEvent(error.message));
  }
  watchPosition() {
    this.watch_id = window.navigator.geolocation.watchPosition(position => {
      this.onCurrentPositionSuccess(position);
    }, error => {
      this.onCurrentPositionFailure(error);
    });
  }
  clearWatchPosition() {
    if (this.watch_id) {
      window.navigator.geolocation.clearWatch(this.watch_id);
    }
  }
  getCurrentPosition() {
    window.navigator.geolocation.getCurrentPosition(position => {
      this.onCurrentPositionSuccess(position);
    }, error => {
      this.onCurrentPositionFailure(error);
    });
  }
  addMapEventListeners() {
    if (!this.provider)
      return;
    this.provider.addEventListener('maptype_changed', this.plotGrid.bind(this));
    this.provider.addEventListener('zoom_changed', this.plotGrid.bind(this));
    this.provider.addEventListener('bounds_changed', this.plotGrid.bind(this));
    this.provider.addEventListener('click', this.onChangePosition.bind(this));
  }
  setupAutosuggest() {
    if (!this.autosuggest)
      return;
    // Set w3wLanguage to autosuggest language or default both to map language
    if (this.autosuggest.hasAttribute('language')) {
      this.w3wLanguage = this.autosuggest.language;
    }
    else {
      this.w3wLanguage = this.autosuggest.language = this.language;
    }
    // Setup autosuggest api_key if not set
    if (!this.autosuggest.hasAttribute('api_key')) {
      this.autosuggest.setAttribute('api_key', this.api_key);
    }
    this.autosuggest.strict = false;
  }
  addAutosuggestEventListeners() {
    if (!this.autosuggest)
      return;
    this.autosuggest.addEventListener('__focus', this.onControlFocus.bind(this));
    this.autosuggest.addEventListener('value_valid', this.onValueValid.bind(this));
    this.autosuggest.addEventListener('value_invalid', this.onValueInvalid.bind(this));
    this.autosuggest.addEventListener('selected_suggestion', this.onSelectedSuggestion.bind(this));
    this.autosuggest.addEventListener('selected_custom_option', this.onCustomSelect.bind(this));
  }
  removeAutosuggestEventListeners() {
    if (!this.autosuggest)
      return;
    this.autosuggest.removeEventListener('__focus', this.onControlFocus.bind(this));
    this.autosuggest.removeEventListener('value_valid', this.onValueValid.bind(this));
    this.autosuggest.removeEventListener('value_invalid', this.onValueInvalid.bind(this));
    this.autosuggest.removeEventListener('selected_suggestion', this.onSelectedSuggestion.bind(this));
    this.autosuggest.removeEventListener('selected_custom_option', this.onCustomSelect.bind(this));
  }
  removeMapEventListeners() {
    if (!this.provider)
      return;
    this.provider.removeAllEventListeners();
  }
  addCurrentLocationEventListeners() {
    if (!this.currentLocationControlSlot)
      return;
    this.currentLocationControlSlot.addEventListener('click', () => {
      this.getCurrentPosition();
    });
  }
  removeCurrentLocationEventListeners() {
    this.currentLocationControlSlot = this.host.querySelector(CURRENT_LOCATION_CONTROL_SELECTOR);
    if (!this.currentLocationControlSlot)
      return;
    this.currentLocationControlSlot.removeEventListener('click', () => {
      this.getCurrentPosition();
    });
  }
  async plotGrid() {
    if (!this.provider)
      return;
    const zoom = this.provider.zoom;
    const boundingBox = this.provider.bounds;
    const gridSectionOpt = {
      boundingBox,
    };
    clearTimeout(this.request);
    if (zoom < MIN_GRID_ZOOM_LEVEL) {
      return this.clearGrid();
    }
    this.request = setTimeout(() => {
      this.clients.gridSection
        .run(gridSectionOpt)
        .then((grid) => {
        this.provider.clearGrid();
        this.provider.plotGrid(grid, coordinates => {
          this.coordinates_changed.emit(coordinates);
        });
      })
        .catch(error => {
        this.__error.emit(error);
        const { details } = error;
        console.error((details === null || details === void 0 ? void 0 : details.message) || error.message);
      });
    }, 100);
  }
  async onChangePosition(coordinates) {
    if (!this.provider)
      return;
    const zoom = this.provider.zoom;
    if (zoom < MIN_GRID_ZOOM_LEVEL) {
      this.provider.zoom = this.selected_zoom;
    }
    this.provider.panTo(coordinates);
    this.coordinates_changed.emit(coordinates);
  }
  async onSelectedSuggestion(event) {
    const { detail: { suggestion: { words }, }, } = event;
    // convert coordinates to 3wa
    return this.clients.convertToCoordinates
      .run({
      words,
    })
      .then(async (response) => {
      // pan to the selected coordinates and zoom to selected zoom if changed
      await this.panTo(response.coordinates);
      const zoom = await this.getZoom();
      if (this.reset_zoom_on_select && zoom !== this.selected_zoom) {
        // check and reset zoom level to default (selected_zoom)
        // NOTE: larger zoom value = higher resolution / zoom in
        await this.setZoom(this.selected_zoom);
      }
      // store detected language if changed
      if (response.language !== this.w3wLanguage) {
        this.w3wLanguage = response.language;
      }
      this.coordinates_changed.emit(response.coordinates);
    })
      .catch(error => {
      const { details } = error;
      console.error((details === null || details === void 0 ? void 0 : details.message) || error.message);
    });
  }
  async onCustomSelect(event) {
    const { id } = event.detail;
    const coordinates = await this.provider
      .getCoordinatesFromPlace(id)
      .catch(error => {
      this.__error.emit(new ErrorEvent('ServiceError', {
        message: DEFAULTS.serviceErrorMessage,
        error,
      }));
      return;
    });
    if (!coordinates)
      return;
    const zoom = this.provider.zoom;
    if (zoom !== this.selected_zoom)
      this.zoom = this.selected_zoom;
    this.provider.panTo(coordinates);
    this.coordinates_changed.emit(coordinates);
  }
  onControlFocus() {
    if (this.input && /^(\/\/\/)?$/i.test(this.input.value)) {
      this.input.value = '';
    }
  }
  onValueValid() {
    clearTimeout(this.request);
    this.placesSuggestions = [];
  }
  onValueInvalid(e) {
    if (!this.provider)
      return;
    const { detail: { value }, } = e;
    clearTimeout(this.request);
    if (value.length > 3) {
      this.request = setTimeout(async () => {
        this.placesSuggestions = await this.provider
          .getPlacesSuggestions(value, this.current_location_coordinates, this.language)
          .catch(error => {
          this.__error.emit(new ErrorEvent('ServiceError', {
            error,
            message: DEFAULTS.serviceErrorMessage,
          }));
          return [];
        });
      }, this.autosuggest.typeahead_delay);
    }
  }
  setInputValue(words) {
    if (this.input) {
      this.input.value = '///' + words;
    }
  }
  createProvider() {
    const { map_provider } = this;
    switch (map_provider) {
      case 'google':
      default:
        return new GoogleMaps();
    }
  }
  onProviderInit() {
    if (!this.provider)
      return;
    const { host } = this;
    this.searchControlSlot = host.querySelector(SEARCH_CONTROL_SELECTOR);
    this.currentLocationControlSlot = host.querySelector(CURRENT_LOCATION_CONTROL_SELECTOR);
    this.mapTypeControlSlot = host.querySelector(MAP_TYPE_CONTROL_SELECTOR);
    this.zoomControlSlot = host.querySelector(ZOOM_CONTROL_SELECTOR);
    this.autosuggest = this.searchControlSlot
      ? this.searchControlSlot.querySelector(AUTOSUGGEST_SELECTOR)
      : null;
    this.input = this.autosuggest
      ? this.autosuggest.querySelector(SELECTORS.input)
      : null;
    this.setMapLoaded(true);
    this.addMapEventListeners();
    this.addCurrentLocationEventListeners();
    this.provider.addControl(this.searchControlSlot, this.search_control_position);
    this.provider.addControl(this.currentLocationControlSlot, this.current_location_control_position);
    this.provider.addControl(this.mapTypeControlSlot, this.map_type_control_position);
    this.provider.addControl(this.zoomControlSlot, this.zoom_control_position);
    this.setupAutosuggest();
    this.addAutosuggestEventListeners();
    this.provider.addEventListener('loaded', this.__load.emit.bind(this), {
      once: true,
    });
  }
  getComponentHeaders() {
    const { current_location, disable_default_ui, map_type_control, map_type_id, street_view_control, watch_location, } = this;
    const component_session_id = window.what3words_session_id;
    const meta = JSON.stringify({
      current_location,
      component_session_id,
      disable_default_ui,
      map_type_control,
      map_type_id,
      origin: window.location.origin,
      street_view_control,
      watch_location,
    });
    return {
      'X-W3W-AS-Component': `what3words-Map-JS/${version} (${meta})`,
    };
  }
  connectedCallback() {
    const { host, lat, lng } = this;
    // Prop validations
    const coordinates = this.validateCoordinates({ lat, lng });
    this.lat = coordinates.lat;
    this.lng = coordinates.lng;
    // Initialise provider
    const mapDiv = host.querySelector(MAP_SELECTOR);
    this.searchControlSlot = host.querySelector(SEARCH_CONTROL_SELECTOR);
    this.provider = this.createProvider();
    if (this.mapLoaded)
      this.provider.destroy(); // Do not re-initialise if map already loaded, just re-attach listeners, controls etc.
    this.provider.init(mapDiv, {
      version: this.version,
      api_key: this.map_api_key,
      libraries: this.libraries,
      language: this.language,
      region: this.region,
      center: { lat: this.lat, lng: this.lng },
      tilt: this.tilt,
      disable_default_ui: this.disable_default_ui,
      zoom: this.zoom,
      zoom_control: this.zoom_control,
      zoom_control_position: this.zoom_control_position,
      map_type_id: this.map_type_id,
      map_type_control: this.map_type_control,
      map_type_control_position: this.map_type_control_position,
      scale_control: this.scale_control,
      street_view_control: this.street_view_control,
      street_view_control_position: this.street_view_control_position,
      rotate_control: this.rotate_control,
      rotate_control_position: this.rotate_control_position,
      fullscreen_control: this.fullscreen_control,
      fullscreen_control_position: this.fullscreen_control_position,
    }, this.onProviderInit.bind(this));
    // Configure service clients
    const config = {
      apiVersion: this.api_version,
      headers: Object.assign(Object.assign({}, this.getComponentHeaders()), JSON.parse(this.headers)),
      host: this.base_url,
    };
    const transport = fetchTransport();
    this.clients = {
      convertToCoordinates: what3wordsClients.convertToCoordinates(this.api_key, config, transport),
      convertTo3wa: what3wordsClients.convertTo3wa(this.api_key, config, transport),
      gridSection: what3wordsClients.gridSection(this.api_key, config, transport),
    };
  }
  disconnectedCallback() {
    var _a;
    this.removeAutosuggestEventListeners();
    this.removeMapEventListeners();
    this.removeCurrentLocationEventListeners();
    this.clearWatchPosition();
    (_a = this.provider) === null || _a === void 0 ? void 0 : _a.destroy();
  }
  render() {
    const controlsWrapperStyle = {
      visibility: this.mapLoaded ? 'visible' : 'hidden',
    };
    const ariaHidden = this.mapLoaded ? 'false' : 'true';
    return (h(Host, null, h("slot", { name: "map" }), h("div", { id: "controls-wrapper", "data-testid": "controls-wrapper", "aria-hidden": ariaHidden, style: controlsWrapperStyle }, h("slot", { name: "search-control" }), h("slot", { name: "map-type-control" }), h("slot", { name: "zoom-control" }), h("slot", { name: "current-location-control" }))));
  }
  static get is() { return "what3words-map"; }
  static get originalStyleUrls() {
    return {
      "$": ["map.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["map.css"]
    };
  }
  static get properties() {
    return {
      "api_key": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "api_key",
        "reflect": false,
        "defaultValue": "DEFAULTS.emptyString"
      },
      "headers": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "headers",
        "reflect": false,
        "defaultValue": "DEFAULTS.headers"
      },
      "base_url": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "base_url",
        "reflect": false,
        "defaultValue": "sdk.api.clients.gridSection['_config']?.host || DEFAULTS.base_url"
      },
      "api_version": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ApiVersion",
          "resolved": "ApiVersion.Version1 | ApiVersion.Version2 | ApiVersion.Version3",
          "references": {
            "ApiVersion": {
              "location": "import",
              "path": "@what3words/api"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "api_version",
        "reflect": false,
        "defaultValue": "ApiVersion.Version3"
      },
      "words": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The three word address to load after initial map render. If empty, map will remain at the provided/default lat, lng values"
        },
        "attribute": "words",
        "reflect": false,
        "defaultValue": "DEFAULTS.emptyString"
      },
      "map_provider": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'google'",
          "resolved": "\"google\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "map_provider",
        "reflect": false,
        "defaultValue": "'google'"
      },
      "map_api_key": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "map_api_key",
        "reflect": false,
        "defaultValue": "DEFAULTS.emptyString"
      },
      "version": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "version",
        "reflect": false,
        "defaultValue": "'weekly'"
      },
      "libraries": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "GoogleMapsLibraries",
          "resolved": "(\"drawing\" | \"geometry\" | \"localContext\" | \"places\" | \"visualization\")[]",
          "references": {
            "GoogleMapsLibraries": {
              "location": "import",
              "path": "./domain"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "defaultValue": "DEFAULT_LIBS"
      },
      "language": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Passed to the maps provider sdk. Also used as the default w3w language.\nCross-compatible language support is not guaranteed between the map provider and w3w sdks.\nw3w language default behavior can be overridden by setting the what3words-autosuggest language prop to a supported language.\nSee https://developers.google.com/maps/faq#languagesupport\nSee https://developer.what3words.com/public-api/docs#available-languages"
        },
        "attribute": "language",
        "reflect": false,
        "defaultValue": "'en'"
      },
      "region": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "region",
        "reflect": false,
        "defaultValue": "'GB'"
      },
      "lat": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Latitude value used on initial map render. Defaults to What3Words HQ latitude."
        },
        "attribute": "lat",
        "reflect": false,
        "defaultValue": "DEFAULTS.center.lat"
      },
      "lng": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Longitude value used on initial map render. Defaults to What3Words HQ longitude."
        },
        "attribute": "lng",
        "reflect": false,
        "defaultValue": "DEFAULTS.center.lng"
      },
      "tilt": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "tilt",
        "reflect": false,
        "defaultValue": "0"
      },
      "disable_default_ui": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "disable_default_ui",
        "reflect": false
      },
      "zoom": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "zoom",
        "reflect": false,
        "defaultValue": "8"
      },
      "zoom_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "zoom_control",
        "reflect": false
      },
      "zoom_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "zoom_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "map_type_id": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ViewType",
          "resolved": "\"hybrid\" | \"road\" | \"satellite\" | \"terrain\"",
          "references": {
            "ViewType": {
              "location": "import",
              "path": "./providers/abstract"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "map_type_id",
        "reflect": false
      },
      "map_type_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "map_type_control",
        "reflect": false
      },
      "map_type_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "map_type_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "scale_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "scale_control",
        "reflect": false
      },
      "street_view_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "street_view_control",
        "reflect": false
      },
      "street_view_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "street_view_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "rotate_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "rotate_control",
        "reflect": false
      },
      "rotate_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "rotate_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "fullscreen_control": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "fullscreen_control",
        "reflect": false
      },
      "fullscreen_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "fullscreen_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "search_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "search_control_position",
        "reflect": false,
        "defaultValue": "TOP_LEFT"
      },
      "current_location_control_position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "current_location_control_position",
        "reflect": false,
        "defaultValue": "0"
      },
      "selected_zoom": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "selected_zoom",
        "reflect": false,
        "defaultValue": "SELECTED_ZOOM_LEVEL"
      },
      "current_location": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "current_location",
        "reflect": false
      },
      "watch_location": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "watch_location",
        "reflect": false
      },
      "marker_icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "marker_icon",
        "reflect": false,
        "defaultValue": "MARKER_SRC"
      },
      "reset_zoom_on_select": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Reset map level zoom to selected_zoom after panning to user-selected autosuggest suggestion"
        },
        "attribute": "reset_zoom_on_select",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "searchControlSlot": {},
      "currentLocationControlSlot": {},
      "zoomControlSlot": {},
      "mapTypeControlSlot": {},
      "mapLoaded": {},
      "input": {},
      "autosuggest": {},
      "placesSuggestions": {},
      "request": {},
      "watch_id": {},
      "provider": {},
      "current_location_coordinates": {},
      "w3wLanguage": {},
      "clients": {}
    };
  }
  static get events() {
    return [{
        "method": "selected_square",
        "name": "selected_square",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "ThreeWordAddress",
          "resolved": "ThreeWordAddress",
          "references": {
            "ThreeWordAddress": {
              "location": "import",
              "path": "./domain"
            }
          }
        }
      }, {
        "method": "coordinates_changed",
        "name": "coordinates_changed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "Coordinates",
          "resolved": "Coordinates",
          "references": {
            "Coordinates": {
              "location": "import",
              "path": "@what3words/api"
            }
          }
        }
      }, {
        "method": "__load",
        "name": "__load",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "__error",
        "name": "__error",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "{ error: ErrorEvent }",
          "resolved": "{ error: ErrorEvent; }",
          "references": {
            "ErrorEvent": {
              "location": "global"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setApiKey": {
        "complexType": {
          "signature": "(key: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setBaseUrl": {
        "complexType": {
          "signature": "(host: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setHeaders": {
        "complexType": {
          "signature": "(value: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setApiVersion": {
        "complexType": {
          "signature": "(api_version: ApiVersion) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ApiVersion": {
              "location": "import",
              "path": "@what3words/api"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setWords": {
        "complexType": {
          "signature": "(words: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "LocationJsonResponse": {
              "location": "import",
              "path": "@what3words/api"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "clearGrid": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "getLat": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setCoordinates": {
        "complexType": {
          "signature": "(newCoordinateValue: number, _oldCoordinateValue: number, propName: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }, {
              "tags": [],
              "text": ""
            }, {
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "getLng": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setZoom": {
        "complexType": {
          "signature": "(zoom: number) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "getZoom": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "getBounds": {
        "complexType": {
          "signature": "() => Promise<google.maps.LatLngBoundsLiteral>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "google": {
              "location": "global"
            }
          },
          "return": "Promise<LatLngBoundsLiteral>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "panTo": {
        "complexType": {
          "signature": "(coordinates: Coordinates) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "Coordinates": {
              "location": "import",
              "path": "@what3words/api"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setMapTypeId": {
        "complexType": {
          "signature": "(map_type_id: ViewType) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ViewType": {
              "location": "import",
              "path": "./providers/abstract"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get watchers() {
    return [{
        "propName": "api_key",
        "methodName": "setApiKey"
      }, {
        "propName": "base_url",
        "methodName": "setBaseUrl"
      }, {
        "propName": "headers",
        "methodName": "setHeaders"
      }, {
        "propName": "api_version",
        "methodName": "setApiVersion"
      }, {
        "propName": "words",
        "methodName": "setWords"
      }, {
        "propName": "lng",
        "methodName": "setCoordinates"
      }, {
        "propName": "lat",
        "methodName": "setCoordinates"
      }, {
        "propName": "zoom",
        "methodName": "setZoom"
      }, {
        "propName": "map_type_id",
        "methodName": "setMapTypeId"
      }, {
        "propName": "search_control_position",
        "methodName": "setSearchControlPosition"
      }, {
        "propName": "current_location_control_position",
        "methodName": "setCurrentLocationControlPosition"
      }, {
        "propName": "map_type_control_position",
        "methodName": "setMapTypeControlPosition"
      }, {
        "propName": "zoom_control_position",
        "methodName": "setZoomControlPosition"
      }, {
        "propName": "fullscreen_control_position",
        "methodName": "setFullscreenControlPosition"
      }, {
        "propName": "street_view_control_position",
        "methodName": "setStreetViewControlPosition"
      }, {
        "propName": "rotate_control_position",
        "methodName": "setRotateControlPosition"
      }, {
        "propName": "placesSuggestions",
        "methodName": "handlePlacesSuggestions"
      }, {
        "propName": "version",
        "methodName": "watchMapVersion"
      }, {
        "propName": "map_api_key",
        "methodName": "watchMapApiKey"
      }, {
        "propName": "libraries",
        "methodName": "watchMapLibraries"
      }, {
        "propName": "language",
        "methodName": "watchMapLanguage"
      }, {
        "propName": "region",
        "methodName": "watchMapRegion"
      }];
  }
  static get listeners() {
    return [{
        "name": "__load",
        "method": "onLoad",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "coordinates_changed",
        "method": "onSelectedCoordinates",
        "target": undefined,
        "capture": true,
        "passive": true
      }];
  }
}
