import { b as SELECTORS, q as querystring, c as ScriptInitParameters, S as ScriptInitParameter, d as dist } from './index-c9f2fa76.js';

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Converts a string of coordinate pair values into an array of coordinate objects
 * @param coordinatesString A string of coordinate pair values e.g. `67.234,-42.00,24.24,47.42`
 */
const convertToCoordinates = (coordinatesString) => {
  const coordinatesArr = coordinatesString.split(',');
  const result = [];
  for (let i = 0; i < coordinatesArr.length; i += 2) {
    result.push(parseCoordinates(coordinatesArr[i], coordinatesArr[i + 1]));
  }
  return result;
};
/**
 * Parses coordinate string and returns as an object with floating values
 * @param lat A coordinate-like string
 * @param lng A coordinate-like string
 * @returns object
 */
const parseCoordinates = (lat, lng) => ({
  lat: parseFloat(lat),
  lng: parseFloat(lng),
});
/**
 * Validates if a value or array is empty
 * @param input the value or array to validate if empty
 */
const isEmpty = (input) => {
  return input === null || input === undefined || input.length === 0;
};
/**
 * Retrieves API options that are settable via query parameters in the request of the SDK. This function retrieves and
 * returns an object with all found parameters if any exist
 * @returns object
 */
function getScriptInitOptions() {
  const options = {};
  const scriptTag = document.querySelector(SELECTORS.script);
  if (scriptTag) {
    const params = querystring.parse(scriptTag.src.split('?')[1]);
    Object.entries(params).forEach(([key, value]) => {
      if (ScriptInitParameters.includes(key)) {
        switch (key) {
          case ScriptInitParameter.KEY:
          case ScriptInitParameter.BASEURL:
          case ScriptInitParameter.CALLBACK:
            options[key] = value;
            break;
          case ScriptInitParameter.HEADERS:
            if (value.length > 0)
              options[key] = JSON.parse(value);
        }
      }
    });
  }
  return options;
}

const UTILISATION_ENABLED_HOSTS = ['.*\\.w3w\\.io', '.*\\.what3words\\.com'];
var SessionType;
(function (SessionType) {
  SessionType["Started"] = "POST";
  SessionType["Updated"] = "PATCH";
})(SessionType || (SessionType = {}));
const isUtilisationEnabledHost = (host) => new RegExp(UTILISATION_ENABLED_HOSTS.join('|')).test(host);
class Utilisation {
  constructor() {
    this.host = 'https://utilisation-api.what3words.com';
  }
  /**
   * Sets the API Key
   * @param apiKey W3W API key
   */
  setApiKey(apiKey) {
    this.apiKey = apiKey;
  }
  /**
   * Allows overriding of utilisation api host (i.e: preprod, dev etc)
   * @param host utilisation api host
   */
  setHost(host) {
    this.host = host;
  }
  async send(session) {
    const { key, baseUrl, headers, data, transport = dist.fetchTransport(), type, } = session;
    const apiKey = key || this.apiKey;
    if (!apiKey || !isUtilisationEnabledHost(baseUrl)) {
      return false;
    }
    const request = {
      method: type,
      host: `${this.host.replace(/\/$/, '')}`,
      url: '/autosuggest-session',
      query: { key: apiKey },
      headers: Object.assign({ 'Content-Type': 'application/json' }, [
        'Origin',
        'User-Agent',
        'X-W3W-Wrapper',
        'X-W3W-AS-Component',
        'X-Correlation-ID',
        'X-W3W-Plugin',
        'X-API-Key',
      ].reduce((acc, key) => {
        if (headers[key])
          acc[key] = headers[key];
        return acc;
      }, {})),
      body: data,
    };
    return transport(request)
      .then(response => response.status >= 200 && response.status < 300)
      .catch(_err => false);
  }
}
const utilisation = new Utilisation();

export { SessionType as S, convertToCoordinates as c, getScriptInitOptions as g, isEmpty as i, parseCoordinates as p, utilisation as u };
